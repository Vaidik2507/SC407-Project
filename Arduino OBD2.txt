#include <CAN.h> 
#include <OBD.h>
#include <ESP8266WiFi.h>
#include <Adafruit_MQTT.h>
#include <Adafruit_MQTT_Client.h>

// WiFi parameters
#define WLAN_SSID "Shubham"
#define WLAN_PASS "shubhampatel464"

// Adafruit IO
#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883
#define AIO_USERNAME    "shubham464"
#define AIO_KEY         "aio_XKSD89yHHlWC8GrLOz5hIK5T6IsG"

#define DATA_FEED       "SC407"

// Create an ESP8266 WiFiClient class to connect to the MQTT server.
WiFiClient client;

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);

Adafruit_MQTT_Publish mqttPublish = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/RFID_Attendance");


OBD obd;

void setup() {
  Serial.begin(9600);
  obd.begin();

  WiFi.mode(WIFI_STA);
  WiFi.begin(WLAN_SSID, WLAN_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }


}

int engineRPM,speed,engineLoad,coolantTemp,throttlePosition,oxygenReading,massAirFlow;

void sendToMQTT(const char* data) {
  // Publish the data to the MQTT topic
  if (!mqttPublish.publish(data)) {
    Serial.println("Failed to publish to MQTT");
  } else {
    Serial.println("Published to MQTT");
  }
}

void loop() {
  
    while(1){

      // Reading values of parameter from OBD
      obd.read(PID_SPEED, speed);
      obd.read(PID_RPM, engineRPM);
      obd.read(PID_COOLANT_TEMP , coolantTemp);
      obd.read(PID_ENGINE_LOAD , engineLoad);
      obd.read(PID_RELATIVE_THROTTLE_POS , throttlePosition);
      obd.read(PID_MAF_FLOW, massAirFlow);
      obd.read(PID_OXYGEN, oxygenReading);

      // Sending data to io.adafruit.com
      sendToMQTT(speed);  
      sendToMQTT(engineRPM);
      sendToMQTT(coolantTemp);
      sendToMQTT(engineLoad);
      sendToMQTT(throttlePosition);
      sendToMQTT(massAirFlow);
      sendToMQTT(oxygenReading);

      delay(5000);

    }
}


